"""
Django settings for {{ cookiecutter.project_name }} project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
from dj_database_url import parse as db_url

ADMINS = (
    ('Andr√© Luiz', 'contato@xdvl.info'),
)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).absolute().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())

INTERNAL_IPS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # 3rd
    'compressor',
    'debug_toolbar',
    'django_extensions',
    'storages',
    # Project
    '{{ cookiecutter.repo_name }}.core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = '{{ cookiecutter.repo_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            str(BASE_DIR / '{{ cookiecutter.repo_name }}' / 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ cookiecutter.repo_name }}.wsgi.application'

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': '{{ cookiecutter.repo_name }}.core.middleware.show_toolbar'
}


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {'default': config('DATABASE_URL', cast=db_url)}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# AWS
# https://boto3.readthedocs.org/en/latest/

AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', '123')

AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', '456')

AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', '{{ cookiecutter.repo_name }}')

AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', 's3.amazonaws.com/{{ cookiecutter.repo_name }}')

AWS_PRELOAD_METADATA = True

AWS_DEFAULT_ACL = 'public-read'

AWS_AUTO_CREATE_BUCKET = True

AWS_QUERYSTRING_AUTH = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

STATICFILES_DIRS = [
    str(BASE_DIR / '{{ cookiecutter.repo_name }}' / 'static'),
    str(BASE_DIR / 'node_modules'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = str(BASE_DIR / 'media-root')

STATIC_URL = '/static/'
STATIC_ROOT = str(BASE_DIR / 'static-root')

if not DEBUG:
    DEFAULT_FILE_STORAGE = '{{ cookiecutter.repo_name }}.core.storages.DefaultStorage'

    STATICFILES_STORAGE = '{{ cookiecutter.repo_name }}.core.storages.StaticStorage'

    STATIC_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/static/'

    MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/'


# Django-compressor
# https://django-compressor.readthedocs.org/en/latest/

COMPRESS_PRECOMPILERS = [
    ('text/x-sass', 'django_libsass.SassCompiler'),
    ('text/x-scss', 'django_libsass.SassCompiler'),
]

COMPRESS_OFFLINE = True

COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
]

COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
]

if not DEBUG:
    COMPRESS_URL = STATIC_URL

    COMPRESS_ROOT = STATIC_ROOT

    COMPRESS_STORAGE = STATICFILES_STORAGE


# Django-libsass
# https://github.com/torchbox/django-libsass

LIBSASS_SOURCEMAPS = True

# E-mail
# https://docs.djangoproject.com/en/2.0/topics/email/

EMAIL_SUBJECT_PREFIX = '[{{ cookiecutter.project_name }}] '

# Auth
# https://docs.djangoproject.com/en/2.0/topics/auth

from django.urls import reverse_lazy  # NOQA

LOGIN_URL = reverse_lazy('login')

LOGIN_REDIRECT_URL = reverse_lazy('index')

LOGOUT_REDIRECT_URL = reverse_lazy('login')


# Logging
# https://docs.djangoproject.com/en/2.0/topics/logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}


# Messages
# https://docs.djangoproject.com/en/2.0/ref/contrib/messages/

from django.contrib.messages import constants as messages  # NOQA

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}
